bucket sort
the main idea is : when the gap is small enough, the answer will be in two buckets.
Given an unsorted array, find the maximum difference between the successive elements in its sorted form.

Return 0 if the array contains less than 2 elements.

class Solution {
    public int maximumGap(int[] nums) {
    if (nums == null || nums.length < 2){
            return 0;
        }
        int min = nums[0];
        int max = nums[0];
        for (int i : nums){
            min = Math.min(min, i);
            max = Math.max(max, i);
        }
        int gap = (int)Math.ceil((double)(max - min) / (nums.length - 1));
        int[] bucketsMIN = new int[nums.length - 1];
        int[] bucketsMAX = new int[nums.length - 1];
        Arrays.fill(bucketsMIN, Integer.MAX_VALUE);
        Arrays.fill(bucketsMAX, Integer.MIN_VALUE);
        for (int i : nums){
            if (i == min || i == max){
                continue;
            }
            int idx = (i - min) / gap;
            bucketsMIN[idx] = Math.min(i, bucketsMIN[idx]);
            bucketsMAX[idx] = Math.max(i, bucketsMAX[idx]);
        }
        int maxGap = Integer.MIN_VALUE;
        int previous = min;
        for (int i = 0; i < nums.length - 1;i++){
            if (bucketsMIN[i] == Integer.MAX_VALUE && bucketsMAX[i] == Integer.MIN_VALUE){
                continue;
            }
            maxGap = Math.max(maxGap, bucketsMIN[i] - previous);
            previous = bucketsMAX[i]; 
        }
        maxGap = Math.max(maxGap, max - previous);
        return maxGap;
}
}



radix sort:
基数排序
public int maximumGap(int[] nums) {
        if (nums == null || nums.length < 2){
            return 0;
        }
        int radix = 10;
        int max = nums[0];
        for (int i = 1; i < nums.length; i++){
            max = Math.max(max, nums[i]);
        }
        int[] aux = new int[nums.length];
        int exp = 1;
        while (max / exp > 0){
            int[] count = new int[radix];
            for (int i = 0; i < nums.length; i++){
                count[(nums[i] / exp) % 10]++;
            }
            // using counting sort
            for (int i = 1; i < count.length; i++){
                count[i] += count[i - 1];
            }
            for (int i = nums.length - 1; i >= 0; i--){
                aux[--count[(nums[i] / exp) % 10]] = nums[i];
            }
            for(int i = 0; i < nums.length; i++){
                nums[i] = aux[i];
            }
            exp *= 10;
        }
        int maxGap = 0;
        for (int i = 0; i < nums.length - 1; i++){
            maxGap = Math.max(maxGap, nums[i + 1] - nums[i]);
        }
        return maxGap;
    }